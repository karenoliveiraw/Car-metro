package view;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.EventQueue;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;

import model.DAO;

public class Carometro extends JDialog {
	private JTextField txtId;
	private JTextField txtAluno;
	private JLabel lblFoto;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Carometro dialog = new Carometro();
					dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
					dialog.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the dialog.
	 */
	public Carometro() {
		setModal(true);
		setBounds(100, 100, 416, 439);
		getContentPane().setLayout(null);

		txtId = new JTextField();
		txtId.setEditable(false);
		txtId.setBounds(66, 62, 57, 20);
		getContentPane().add(txtId);
		txtId.setColumns(10);

		JLabel lblId = new JLabel("ID");
		lblId.setBounds(24, 65, 46, 14);
		getContentPane().add(lblId);

		JLabel lblAlunoa = new JLabel("Aluno(a)");
		lblAlunoa.setBounds(10, 32, 60, 14);
		getContentPane().add(lblAlunoa);

		txtAluno = new JTextField();
		txtAluno.setColumns(10);
		txtAluno.setBounds(66, 31, 152, 20);
		getContentPane().add(txtAluno);

		JButton btnBuscar = new JButton("Buscar");
		btnBuscar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		btnBuscar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				buscar();
			}
		});
		btnBuscar.setBounds(228, 28, 89, 23);
		getContentPane().add(btnBuscar);

		lblFoto = new JLabel("");
		lblFoto.setBorder(new LineBorder(new Color(0, 0, 0)));
		lblFoto.setBounds(24, 106, 293, 263);
		getContentPane().add(lblFoto);
		
		btnDelete = new JButton("");
		btnDelete.setIcon(new ImageIcon(Carometro.class.getResource("/img/delete.png")));
		btnDelete.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		btnDelete.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				apagar();
			}
		});
		btnDelete.setBounds(326, 305, 64, 64);
		getContentPane().add(btnDelete);

	}// fim do construtor

	DAO dao = new DAO();
	private JButton btnDelete;

	private void buscar() {
		String read = "select * from alunos where nome = ?";
		try {
			Connection con = dao.conectar();
			PreparedStatement pst = con.prepareStatement(read);
			pst.setString(1, txtAluno.getText());
			ResultSet rs = pst.executeQuery();
			if (rs.next()) {
				txtId.setText(rs.getString(1));
				//Ler o binário e converter para imagem
				Blob blob = (Blob) rs.getBlob(3);
				byte[] img = blob.getBytes(1, (int) blob.length());
				// "papel" que vai "imprimir" a imagem
				BufferedImage imagem = null;
				try {
					// renderizar a imagem (desenhar a foto(pixels) no "papel")
					imagem = ImageIO.read(new ByteArrayInputStream(img));
				} catch (Exception e) {
					System.out.println(e);
				}
				// setar a imagem no JLabel
				ImageIcon icone = new ImageIcon(imagem);
				Icon foto = new ImageIcon(icone.getImage().getScaledInstance(lblFoto.getWidth(), lblFoto.getHeight(), Image.SCALE_SMOOTH));
				lblFoto.setIcon(foto);
			} else {
				JOptionPane.showMessageDialog(null, "Aluno(a) não cadastrado(a)");
			}
			
		} catch (Exception e) {
			System.out.println(e);
		}
	}
	private void apagar() {

		// validação 
		int confirma = JOptionPane.showConfirmDialog(null,  "Confirma a exclusão deste aluno(a)?", "ATENÇÃO!",
				JOptionPane.YES_NO_OPTION);

		if (confirma == JOptionPane.YES_OPTION) {
			// logica principal
			String delete = "delete from alunos where Id = ?";
			try {
				// abrir conexï¿½o
				Connection con = dao.conectar();

				// preparar a query
				PreparedStatement pst = con.prepareStatement(delete);
				pst.setString(1, txtId.getText());

				// executar o comando sql e confirmar a exclusï¿½o
				int confirmaExcluir = pst.executeUpdate();
				if (confirmaExcluir == 1) {
					limpar();
					JOptionPane.showMessageDialog(null, "Aluno (a) excluido(a) com sucesso!");
					
					btnDelete.setEnabled(false);
					
				} else {
					JOptionPane.showMessageDialog(null, "ERRO na exclusão do aluno(a)");
				}
	
				// encerrar a conexão
				con.close();

			} catch (Exception e) {
				System.out.println(e);
			}
		}

	}
	
	private void limpar () {
		txtAluno.setText(null);
		lblFoto.setIcon(null);
		txtId.setText(null);
	}

}// fim do codigo
